security:
#    enable_authenticator_manager: true
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
#    password_hashers:
#        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        #users_in_memory: { memory: null }
        default:
            id: App\Security\UserProvider
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt|errors)|css|images|js)/
            security: false
        main:
            pattern: ^/
            entry_point: App\Security\MainEntryPoint
            webauthn:
                options_storage: 'App\CustomStorage'
                registration:
                    enabled: true
                    profile: default
                    routes:
                        options_path: '/attestation/options'
                        result_path: '/attestation/result'
                authentication:
                    enabled: true
                    profile: default
                    routes:
                        options_path: '/assertion/options'
                        result_path: '/assertion/result'
            logout:
                path: '/logout'

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/logout,  roles: PUBLIC_ACCESS, requires_channel: 'https' }
        - { path: ^/login,  roles: PUBLIC_ACCESS, requires_channel: 'https' }
        - { path: ^/register,  roles: PUBLIC_ACCESS, requires_channel: 'https' }
        - { path: ^/profile, roles: ROLE_USER, requires_channel: 'https' }
        #- { path: ^/attestation/options, roles: PUBLIC_ACCESS, requires_channel: 'https' }
        - { path: ^/,       roles: PUBLIC_ACCESS, requires_channel: 'https' }

#when@test:
#    security:
#        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
#            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
#                algorithm: auto
#                cost: 4 # Lowest possible value for bcrypt
#                time_cost: 3 # Lowest possible value for argon
#                memory_cost: 10 # Lowest possible value for argon
